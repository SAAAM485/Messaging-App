// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String                    @id @default(cuid())
  name          String?
  email         String?                   @unique
  image         String?
  bio           String?
  lastSeen      DateTime?
  provider      String
  providerId    String
  friends       Friend[]                  @relation("UserFriends")
  friendOf      Friend[]                  @relation("FriendOf")
  sentMessages  Message[]
  conversations ConversationParticipant[]

  @@unique([provider, providerId], name: "provider_providerId")
}

model Friend {
  id       String @id @default(cuid())
  status   String
  user     User   @relation("UserFriends", fields: [userId], references: [id])
  userId   String
  friend   User   @relation("FriendOf", fields: [friendId], references: [id])
  friendId String
}

model Message {
  id             String       @id @default(cuid())
  content        String?
  imageUrl       String?
  sentAt         DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
}

model Conversation {
  id           String                    @id @default(cuid())
  name         String?
  isGroup      Boolean
  createdAt    DateTime                  @default(now())
  messages     Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
}
